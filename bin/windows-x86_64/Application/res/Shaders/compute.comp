#version 450
#include "common.glsl"
#include "random.glsl"

layout(set = 0, binding = 0) uniform GlobalFrameData{
    mat4 projection;
    mat4 view;
    mat4 inverseProjection;
    mat4 inverseView;
    vec4 cameraPosition;
    vec4 cameraDirection;
    uint frameIndex;
    int bounceLimit;
    float extinction;
    float anisotropy;
    vec3 backgroundColor;
} globalData;

layout(set = 1, binding = 0, rgba32f) uniform image2D accumulationImageIn;
layout(set = 1, binding = 1, rgba32f) uniform image2D accumulationImageOut;
layout(set = 1, binding = 2, rgba8) uniform image2D outputImage;
layout(set = 1, binding = 3) uniform sampler3D datasetImage;
//layout(set = 1, binding = 3) uniform sampler2D transferFunctionImage;
layout (local_size_x = 32, local_size_y = 32, local_size_z = 1) in;


struct Photon {
    vec3 position;
    vec3 direction;
    vec3 transmittance;
    vec3 radiance;
    uint bounces;
};

/*
bool PerformVoxelTraversal(inout Photon p)
{
    float gridSize = textureSize(muTexture, 0).r;

    vec3 invDir = 1 / p.direction;
    vec3 rayGradient = abs(invDir / gridSize);

    ivec3 cellIndex =  ivec3(p.position * gridSize);
    vec3 lengthStepped = (p.position * gridSize - vec3(cellIndex)) * rayGradient;

    if(p.direction.x > 0)
        lengthStepped.x = (cellIndex.x + 1.0f - p.position.x * gridSize) * rayGradient.x;
    if(p.direction.y > 0)
        lengthStepped.y = (cellIndex.y + 1.0f - p.position.y * gridSize) * rayGradient.y;
    if(p.direction.z > 0)
        lengthStepped.z = (cellIndex.z + 1.0f - p.position.z * gridSize) * rayGradient.z;

    float unif = -log(RandomValue(rng)) / data.extinction;

    float umin = 0.0f;
    float umax = 0.0f;

    while(true)
    {
        float umin = umax;
        if (lengthStepped.x < lengthStepped.y && lengthStepped.x < lengthStepped.z) {
            umax = lengthStepped.x; 
            lengthStepped.x += rayGradient.x;
        } else if (lengthStepped.y < lengthStepped.x && lengthStepped.y < lengthStepped.z) {
            umax = lengthStepped.y; 
            lengthStepped.y += rayGradient.y;
        } else {
            umax = lengthStepped.z; 
            lengthStepped.z += rayGradient.z;  
        }

        vec3 midpoint = p.position + p.direction * (umin + umax) * 0.5;

        if (any(greaterThan(midpoint, vec3(1 + 1e-4))) || any(lessThan(midpoint, vec3(0 - 1e-4)))) {
            return false;
        }


        float mu = texture(muTexture, midpoint).r;
        float s = umax - umin;
        float opticalThicness = mu * s;
        
        if (opticalThicness >= unif)
        {
            float t = unif / mu;
            p.position = p.position + p.direction * (umin + t);
            return true;
        }
        unif -= opticalThicness;
    }
}*/


void main() 
{

    ivec2 px = ivec2(gl_GlobalInvocationID.xy);
	vec2 size = imageSize(outputImage);
    vec2 uv = px / size;

    vec3 rayOrigin = globalData.cameraPosition.xyz;
    vec4 rayTarget = globalData.inverseProjection * vec4(uv * 2.0 - 1.0, 1.0, 1.0);
    vec3 rayDirection = vec3(globalData.inverseView * vec4(normalize(rayTarget.xyz / rayTarget.w), 0.0));

    float tmin;
    float tmax;
    bool intersect = RayBox(rayOrigin, rayDirection, vec3(0, 0, 0), vec3(1, 1, 1), tmin, tmax);
    tmin = max(tmin, 0.0);
    float maxDist = tmax - tmin;

    vec4 outputColor = vec4(globalData.backgroundColor, 0);
    vec3 pos = rayOrigin + rayDirection * tmin;
    uint rng = globalData.frameIndex;

    if(intersect)
    {
        //int maxSteps = 20;
        //for (float i = 0; i < maxSteps; i++)
        //{
        //    float ratio = (i + RandomValue(rng)) / maxSteps;
        //    float r = texture(datasetImage, pos + rayDirection * maxDist * ratio).r;
        //    outputColor += vec4(r) / maxSteps;
        //}

        
        Photon photon;
        photon.position = rayOrigin + rayDirection * tmin;
        photon.direction = rayDirection;
        photon.bounces = 0;
        photon.transmittance = vec3(1.0f);
        photon.radiance = vec3(0);

        uint rng = globalData.frameIndex;
        int limit = 1000;
        while(limit > 0)
        {
            //if(!PerformVoxelTraversal(photon))
            //{
            //    vec3 envSample = data.backgroundColor;
            //    vec3 radiance = photon.transmittance * envSample.rgb;
            //    photon.radiance += (radiance - photon.radiance);
            //    break;
            //}

            float step = -log(RandomValue(rng)) / globalData.extinction;
            photon.position += step * photon.direction;
            if (any(greaterThan(photon.position, vec3(1))) || any(lessThan(photon.position, vec3(0)))) {
                // out of bounds
                vec3 envSample = globalData.backgroundColor;
                vec3 radiance = photon.transmittance * envSample.rgb;
                photon.radiance += (radiance - photon.radiance);                
                break;
            }

            float intensity = texture(datasetImage, photon.position).r;
            //vec4 transferFunction = texture(colorGradient, vec2(intensity, 0.5));
            vec4 transferFunction = vec4(1, 0, 0, intensity * 5);
            float PNull = 1.0 - transferFunction.a;

            float PScattering;
            if (photon.bounces >= globalData.bounceLimit) {
                PScattering = 0.0;
            } else {
                PScattering = transferFunction.a * max3(transferFunction.rgb);
            }
            float PAbsorption = 1.0 - PNull - PScattering;

            float rand = RandomValue(rng);
            if (rand < PAbsorption) {
                // absorption
                vec3 radiance = vec3(0);
                photon.radiance += (radiance - photon.radiance);
                break;
            } else if (rand < PAbsorption + PScattering) {
                // scattering
                photon.transmittance *= photon.transmittance * transferFunction.rgb;

                float anisotropy = globalData.anisotropy;
                photon.direction = sampleHenyeyGreenstein(rng, anisotropy, photon.direction);
                photon.bounces++;
            } else {
                // null collision
            }
            limit--;
        }

        outputColor.rgb = photon.radiance;
    }

    if(globalData.frameIndex > 1)
        outputColor += imageLoad(accumulationImageIn, px);
    imageStore(accumulationImageOut, px, outputColor);
    imageStore(outputImage, px, outputColor / globalData.frameIndex);
}