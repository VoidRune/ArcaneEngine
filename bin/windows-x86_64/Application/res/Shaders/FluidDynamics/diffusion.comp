#version 450

layout(set = 0, binding = 0, rg16f) uniform image2D velocity;
layout(set = 0, binding = 1, rgba8) uniform image2D dye;

layout( push_constant ) uniform constants
{
	vec4 sourceColor;
	vec2 sourcePos;
	vec2 sourceVelocity;
	float sourceRadius;
	float deltaTime;
} pushConstants;

layout (local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

void main()
{
    ivec2 px = ivec2(gl_GlobalInvocationID.xy);
	ivec2 size = imageSize(velocity);

	float viscosity = 0.1f;
	float k = viscosity * pushConstants.deltaTime;

	ivec2 l = ivec2(max(px.x-1,0), px.y);
    ivec2 r = ivec2(min(px.x+1,size.x-1), px.y);
    ivec2 b = ivec2(px.x, max(px.y-1,0));
    ivec2 t = ivec2(px.x, min(px.y+1,size.y-1));

	//vec2 vc = imageLoad(velocity, px).xy;
	//vec2 vl = imageLoad(velocity, l).xy;
	//vec2 vr = imageLoad(velocity, r).xy;
	//vec2 vb = imageLoad(velocity, b).xy;
	//vec2 vt = imageLoad(velocity, t).xy;
	//vec2 vn = (vc + k * (vl + vr + vb + vt) / 4) / (1 + k);
	//imageStore(velocity, px, vec4(vn, 0, 0));	

	vec4 dc = imageLoad(dye, px);
	vec4 dl = imageLoad(dye, l);
	vec4 dr = imageLoad(dye, r);
	vec4 db = imageLoad(dye, b);
	vec4 dt = imageLoad(dye, t);
	vec4 dn = (dc + k * (dl + dr + db + dt) / 4) / (1 + k);
	imageStore(dye, px, dn);	
}